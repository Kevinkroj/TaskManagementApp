{"ast":null,"code":"var _jsxFileName = \"/Users/kroj/Desktop/Task Management Rect App/task-management-app/src/screens/NotificationScreen.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationScreen = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filteredTasks, setFilteredTasks] = useState([]);\n  const username = '1user'; // Replace this with dynamic retrieval of the logged-in user's username\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get('http://localhost:5001/tasks');\n        const allTasks = response.data;\n        setTasks(allTasks);\n\n        // Filter tasks based on mentions\n        const mentionedTasks = allTasks.filter(task => task.mentions && task.mentions.includes(username));\n        setFilteredTasks(mentionedTasks);\n      } catch (error) {\n        console.error('Failed to fetch tasks:', error);\n      }\n    };\n    fetchTasks();\n  }, [username]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), filteredTasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No mentions found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredTasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: task.comment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\"Deadline: \", new Date(task.deadline).toLocaleDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 32\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\"Status: \", task.status]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 32\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 29\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(NotificationScreen, \"yHuE95l9DZgbTyyo58km0nyTgMY=\");\n_c = NotificationScreen;\nexport default NotificationScreen;\nvar _c;\n$RefreshReg$(_c, \"NotificationScreen\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","NotificationScreen","_s","tasks","setTasks","filteredTasks","setFilteredTasks","username","fetchTasks","response","get","allTasks","data","mentionedTasks","filter","task","mentions","includes","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","title","comment","Date","deadline","toLocaleDateString","status","id","_c","$RefreshReg$"],"sources":["/Users/kroj/Desktop/Task Management Rect App/task-management-app/src/screens/NotificationScreen.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst NotificationScreen = () => {\n    const [tasks, setTasks] = useState([]);\n    const [filteredTasks, setFilteredTasks] = useState([]);\n    const username = '1user'; // Replace this with dynamic retrieval of the logged-in user's username\n\n    useEffect(() => {\n        const fetchTasks = async () => {\n            try {\n                const response = await axios.get('http://localhost:5001/tasks');\n                const allTasks = response.data;\n                setTasks(allTasks);\n\n                // Filter tasks based on mentions\n                const mentionedTasks = allTasks.filter((task: any) => task.mentions && task.mentions.includes(username));\n                setFilteredTasks(mentionedTasks);\n            } catch (error) {\n                console.error('Failed to fetch tasks:', error);\n            }\n        };\n\n        fetchTasks();\n    }, [username]);\n\n    return (\n        <div>\n            <h2>Notifications</h2>\n            {filteredTasks.length === 0 ? (\n                <p>No mentions found.</p>\n            ) : (\n                <ul>\n                    {filteredTasks.map((task: any) => (\n                        <li key={task.id}>\n                            <h3>{task.title}</h3>\n                            <p>{task.comment}</p>\n                            <p><small>Deadline: {new Date(task.deadline).toLocaleDateString()}</small></p>\n                            <p><small>Status: {task.status}</small></p>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </div>\n    );\n};\n\nexport default NotificationScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}